# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

--Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

--Then I inserted the Spotify Data .csv into the table.

--Determined the avg popularity, danceability, and energy by artist and track. 
SELECT
artist_name
,track_name
,avg(popularity)
,avg(danceability)
,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name

--Determined who the Top 10 artists are by popularity
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10

--Which artist has the most tracks in the dataset?
--This tells which artists dominate the dataset (and could help spot the most prolific ones).
SELECT artist_name, COUNT(*) AS total_tracks
FROM BIT_DB.spotifydata
GROUP BY artist_name
ORDER BY total_tracks DESC
LIMIT 10;

--What is the average danceability of the 10 most popular tracks?
--This looks at the “feel” of the most popular songs — are they danceable?
SELECT AVG(danceability) AS avg_danceability_top10
FROM (
    SELECT danceability
    FROM BIT_DB.spotifydata
    ORDER BY popularity DESC
    LIMIT 10
) AS top10;

--Which artists have the highest average popularity overall (min. 5 songs)?
--Ensures we don’t just pick one-hit wonders but instead artists with consistent popularity.
SELECT artist_name, AVG(popularity) AS avg_popularity, COUNT(*) AS track_count
FROM BIT_DB.spotifydata
GROUP BY artist_name
HAVING COUNT(*) >= 5
ORDER BY avg_popularity DESC
LIMIT 10;

--Who are the top 5 artists with the highest average popularity across all their tracks?
--Focuses on artists as a whole instead of individual songs
SELECT artist_name, AVG(popularity) AS avg_popularity
FROM BIT_DB.spotifydata
GROUP BY artist_name
ORDER BY avg_popularity DESC
LIMIT 5;

--Do more popular songs tend to be more danceable?
--This gives you a quick correlation-like view between popularity and danceability
SELECT popularity, AVG(danceability) AS avg_danceability
FROM BIT_DB.spotifydata
GROUP BY popularity
ORDER BY popularity DESC
LIMIT 20;

